import requests
import xml.etree.ElementTree as ET
from datetime import datetime
import json
import os


from kivy.app import App
from kivy.lang import Builder
from kivy.properties import StringProperty, NumericProperty
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen

kv = '''
ScreenManager:
    MainMenu:
    AddBondScreen:
    BondListScreen:

<MainMenu>:
    name: 'menu'
    BoxLayout:
        orientation: 'vertical'
        padding: 20
        spacing: 20
        canvas.before:
            Color:
                rgba: 0.95, 0.95, 0.95, 1
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            font_size: '24sp'
            color: (0, 0, 0, 1)
        Button:
            text: '–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é'
            size_hint_y: None
            height: '50dp'
            background_color: (0.2, 0.6, 0.8, 1)
            color: (1, 1, 1, 1)
            on_release: root.manager.current = 'add'
        Button:
            text: '–°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π'
            size_hint_y: None
            height: '50dp'
            background_color: (0.2, 0.6, 0.8, 1)
            color: (1, 1, 1, 1)
            on_release: root.manager.current = 'list'

<AddBondScreen>:
    name: 'add'
    AnchorLayout:
        anchor_y: 'top'
        padding: 20

        canvas.before:
            Color:
                rgba: 0.95, 0.95, 0.95, 1
            Rectangle:
                pos: self.pos
                size: self.size

        BoxLayout:
            orientation: 'vertical'
            spacing: 15
            size_hint_y: None
            padding: [0, 40, 0, 0]
            height: self.minimum_height

            BoxLayout:
                size_hint_y: None
                height: '50dp'
                spacing: 15
                TextInput:
                    id: ticker_input
                    hint_text: "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏"
                    multiline: False
                    size_hint_x: 0.4
                TextInput:
                    id: purchase_price_input
                    hint_text: "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"
                    input_filter: 'float'
                    multiline: False
                    size_hint_x: 0.3

            BoxLayout:
                size_hint_y: None
                height: '50dp'
                spacing: 15
                TextInput:
                    id: purchase_date_input
                    hint_text: "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (YYYY-MM-DD)"
                    multiline: False
                    size_hint_x: 0.5
                TextInput:
                    id: quantity_input
                    hint_text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π"
                    input_filter: 'int'
                    multiline: False
                    size_hint_x: 0.5

            Button:
                text: "–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏—é"
                size_hint_y: None
                background_color: (0.2, 0.6, 0.8, 1)
                color: (1, 1, 1, 1)
                height: '50dp'
                on_release:
                    app.add_bond()
                    root.manager.current = 'menu'

            Button:
                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                size_hint_y: None
                height: '50dp'
                on_release: root.manager.current = 'menu'


<BondListScreen>:
    name: 'list'
    BoxLayout:
        orientation: 'vertical'
        padding: 20
        spacing: 15
        canvas.before:
            Color:
                rgba: 0.95, 0.95, 0.95, 1
            Rectangle:
                pos: self.pos
                size: self.size

        # üîΩ –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        BoxLayout:
            size_hint_y: None
            height: '60dp'
            spacing: 10
            Label:
                id: total_monthly
                text: "–°—É–º–º–∞—Ä–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: 0"
                color: (0, 0, 0, 1)
            Label:
                id: total_annual
                text: "–°—É–º–º–∞—Ä–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥: 0"
                color: (0, 0, 0, 1)

        Label:
            text: "–°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π:"
            size_hint_y: None
            height: '40dp'
            font_size: '18sp'
            bold: True
            color: (0, 0, 0, 1)

        ScrollView:
            BoxLayout:
                id: bonds_list
                orientation: 'vertical'
                size_hint_y: None
                height: self.minimum_height
                spacing: 10

        Button:
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
            size_hint_y: None
            height: '50dp'
            on_release: root.manager.current = 'menu'

<BondItem>:
    size_hint_y: None
    height: '200dp'
    padding: 10
    canvas.before:
        Color:
            rgba: 1, 1, 1, 1
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [10,]
    RelativeLayout:
        BoxLayout:
            orientation: 'vertical'
            spacing: 6
            padding: [0, 10, 0, 0]
            Label:
                text: root.shortname if root.shortname else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                font_size: '18sp'
                bold: True
                color: (0, 0, 0, 1)
            BoxLayout:
                spacing: 5
                Label:
                    text: "–¢–∏–∫–µ—Ä: " + root.ticker
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'

                Label:
                    text: "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: " + str(root.purchase_price)
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'
            BoxLayout:
                spacing: 5
                Label:
                    text: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + str(root.quantity)
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'
                Label:
                    text: "–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: " + str(round(root.monthly_income, 2))
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'
            BoxLayout:
                spacing: 5
                Label:
                    text: "–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥: " + str(round(root.annual_income, 2))
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'
                Label:
                    text: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é: " + str(round(root.ytm, 2)) + "%"
                    color: (0.2, 0.2, 0.2, 1)
                    text_size: self.size
                    halign: 'left'
                    valign: 'middle'
            Label:
                text: "–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: " + root.matdate
                color: (0.2, 0.2, 0.2, 1)
                text_size: self.size
                halign: 'left'
                valign: 'middle'

        Button:
            text: "X"
            size_hint: None, None
            size: '28dp', '28dp'
            pos_hint: {'right': 1, 'top': 1}
            background_color: (1, 0.3, 0.3, 1)
            color: (1, 1, 1, 1)
            font_size: '14sp'
            on_release: app.remove_bond(root.ticker, root.purchase_date)

'''

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫—Ä–∞–Ω—ã
class MainMenu(Screen):
    pass

class AddBondScreen(Screen):
    pass

class BondListScreen(Screen):
    pass

# –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
class BondItem(BoxLayout):
    ticker = StringProperty('')
    purchase_price = NumericProperty(0)
    purchase_date = StringProperty('')
    shortname = StringProperty('')
    board_id = StringProperty('')
    coupon_percent = NumericProperty(0)
    coupon_value = NumericProperty(0)
    accrued_interest = NumericProperty(0)
    last_price = NumericProperty(0)
    facevalue = NumericProperty(0)
    matdate = StringProperty('')    # –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è
    offerdate = StringProperty('')
    monthly_income = NumericProperty(0)
    annual_income = NumericProperty(0)
    quantity = NumericProperty(0)
    ytm = NumericProperty(0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è BOARDID –ø–æ —Ç–∏–∫–µ—Ä—É (—Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤)
def get_board_id(ticker):
    url = f"https://iss.moex.com/iss/engines/stock/markets/bonds/securities/{ticker}/securities.xml?iss.meta=off&iss.only=marketdata&marketdata.columns=BOARDID"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            row = root.find(".//row")
            if row is not None:
                board_id = row.attrib.get("BOARDID", "")
                return board_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ BOARDID: {e}")
    return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–ª–æ–∫–∞ securities
def get_securities_data(board, ticker):
    url = (f"https://iss.moex.com/iss/engines/stock/markets/bonds/boards/{board}/securities/{ticker}/securities.xml"
           "?iss.meta=off&iss.only=securities&securities.columns=SHORTNAME,COUPONPERCENT,COUPONVALUE,ACCRUEDINT,FACEVALUE,MATDATE,OFFERDATE")
    data = {"SHORTNAME": "", "COUPONPERCENT": 0, "COUPONVALUE": 0, "ACCRUEDINT": 0,
            "FACEVALUE": 0, "MATDATE": "", "OFFERDATE": ""}
    try:
        response = requests.get(url)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            row = root.find(".//row")
            if row is not None:
                data["SHORTNAME"] = row.attrib.get("SHORTNAME", "")
                try:
                    data["COUPONPERCENT"] = float(row.attrib.get("COUPONPERCENT", 0))
                except:
                    data["COUPONPERCENT"] = 0
                try:
                    data["COUPONVALUE"] = float(row.attrib.get("COUPONVALUE", 0))
                except:
                    data["COUPONVALUE"] = 0
                try:
                    data["ACCRUEDINT"] = float(row.attrib.get("ACCRUEDINT", 0))
                except:
                    data["ACCRUEDINT"] = 0
                try:
                    data["FACEVALUE"] = float(row.attrib.get("FACEVALUE", 0))
                except:
                    data["FACEVALUE"] = 0
                data["MATDATE"] = row.attrib.get("MATDATE", "")
                data["OFFERDATE"] = row.attrib.get("OFFERDATE", "–Ω–µ—Ç –æ—Ñ–µ—Ä—Ç—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ securities –¥–∞–Ω–Ω—ã—Ö: {e}")
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (LAST)
def get_marketdata_last(board, ticker):
    url = (f"https://iss.moex.com/iss/engines/stock/markets/bonds/boards/{board}/securities/{ticker}/securities.xml"
           "?iss.meta=off&iss.only=marketdata&marketdata.columns=LAST")
    try:
        response = requests.get(url)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            row = root.find(".//row")
            if row is not None:
                try:
                    return float(row.attrib.get("LAST", 0))
                except:
                    return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ LAST —Ü–µ–Ω—ã: {e}")
    return 0

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–Ω–∞ –æ–¥–Ω—É –æ–±–ª–∏–≥–∞—Ü–∏—é)
def calculate_income(purchase_price, coupon_value, coupon_percent, facevalue):
    if coupon_value > 0:
        annual_income = coupon_value
    elif coupon_percent > 0 and facevalue > 0:
        annual_income = facevalue * coupon_percent / 100
    else:
        annual_income = purchase_price * coupon_percent / 100
    monthly_income = annual_income / 12
    return monthly_income, annual_income

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é (YTM) –ø–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ
def calculate_ytm(purchase_price, coupon_value, facevalue, purchase_date, maturity_date):
    try:
        purchase_dt = datetime.strptime(purchase_date, "%Y-%m-%d")
        maturity_dt = datetime.strptime(maturity_date, "%Y-%m-%d")
        years_to_maturity = (maturity_dt - purchase_dt).days / 365.25
        if years_to_maturity <= 0:
            return 0
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ YTM:
        ytm = (coupon_value + (facevalue - purchase_price) / years_to_maturity) / ((facevalue + purchase_price) / 2)
        return ytm * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ YTM:", e)
        return 0

class BondsApp(App):
    def build(self):
        self.title = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π"
        self.bonds = []
        self.sm = Builder.load_string(kv)
        self.load_bonds()  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
        self.update_bonds_view()  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
        return self.sm

    def get_save_file(self):
        return os.path.join(self.user_data_dir, "bonds.json")

    def save_bonds(self):
        try:
            with open(self.get_save_file(), "w", encoding="utf-8") as f:
                json.dump(self.bonds, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π:", e)

    def load_bonds(self):
        try:
            filepath = self.get_save_file()
            if os.path.exists(filepath):
                with open(filepath, "r", encoding="utf-8") as f:
                    self.bonds = json.load(f)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π:", e)


    def add_bond(self):
        screen = self.sm.get_screen('add')
        ticker = screen.ids.ticker_input.text.strip()
        purchase_price_text = screen.ids.purchase_price_input.text.strip()
        purchase_date = screen.ids.purchase_date_input.text.strip()
        quantity_text = screen.ids.quantity_input.text.strip()
        if not ticker or not purchase_price_text or not purchase_date or not quantity_text:
            print("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: —Ç–∏–∫–µ—Ä, —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏, –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return
        try:
            purchase_price = float(purchase_price_text)
            quantity = int(quantity_text)
        except Exception as e:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
            return

        board_id = get_board_id(ticker)
        if not board_id:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BOARDID –¥–ª—è —Ç–∏–∫–µ—Ä–∞:", ticker)
            return

        securities_data = get_securities_data(board_id, ticker)
        last_price = get_marketdata_last(board_id, ticker)

        shortname = securities_data.get("SHORTNAME", ticker)
        coupon_percent = securities_data.get("COUPONPERCENT", 0)
        coupon_value = securities_data.get("COUPONVALUE", 0)
        accrued_interest = securities_data.get("ACCRUEDINT", 0)
        facevalue = securities_data.get("FACEVALUE", 0)
        matdate = securities_data.get("MATDATE", "")  # –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è
        offerdate = securities_data.get("OFFERDATE", "–Ω–µ—Ç –æ—Ñ–µ—Ä—Ç—ã")

        # –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
        monthly_income, annual_income = calculate_income(purchase_price, coupon_value, coupon_percent, facevalue)
        # –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ—Ö–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π
        total_monthly_income = monthly_income * quantity
        total_annual_income = annual_income * quantity

        # –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –¥–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è)
        ytm = calculate_ytm(purchase_price, coupon_value, facevalue, purchase_date, matdate) if matdate else 0

        bond = {
            'ticker': ticker,
            'purchase_price': purchase_price,
            'purchase_date': purchase_date,
            'quantity': quantity,
            'shortname': shortname,
            'board_id': board_id,
            'coupon_percent': coupon_percent,
            'coupon_value': coupon_value,
            'accrued_interest': accrued_interest,
            'last_price': last_price,
            'facevalue': facevalue,
            'matdate': matdate,
            'offerdate': offerdate,
            'monthly_income': total_monthly_income,
            'annual_income': total_annual_income,
            'ytm': ytm
        }
        self.bonds.append(bond)
        self.update_bonds_view()
        self.save_bonds()

        screen.ids.ticker_input.text = ""
        screen.ids.purchase_price_input.text = ""
        screen.ids.purchase_date_input.text = ""
        screen.ids.quantity_input.text = ""

    def update_bonds_view(self):
        bonds_list = self.sm.get_screen('list').ids.bonds_list
        bonds_list.clear_widgets()
        for bond in self.bonds:
            item = BondItem(
                ticker=bond['ticker'],
                purchase_price=bond['purchase_price'],
                purchase_date=bond['purchase_date'],
                shortname=bond['shortname'],
                board_id=bond['board_id'],
                coupon_percent=bond['coupon_percent'],
                coupon_value=bond['coupon_value'],
                accrued_interest=bond['accrued_interest'],
                last_price=bond['last_price'],
                facevalue=bond['facevalue'],
                matdate=bond['matdate'],
                offerdate=bond['offerdate'],
                monthly_income=bond['monthly_income'],
                annual_income=bond['annual_income'],
                quantity=bond['quantity'],
                ytm=bond['ytm']
            )
            bonds_list.add_widget(item)

    def remove_bond(self, ticker, purchase_date):
        # –£–¥–∞–ª–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
        self.bonds = [b for b in self.bonds if not (b['ticker'] == ticker and b['purchase_date'] == purchase_date)]
        self.save_bonds()
        self.update_bonds_view()


if __name__ == '__main__':
    BondsApp().run()
